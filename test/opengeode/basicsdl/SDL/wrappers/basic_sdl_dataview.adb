-- Code automatically generated by asn1scc tool
pragma Warnings (Off, "redundant with clause in body");
pragma Warnings (On, "redundant with clause in body");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through previous use_type_clause at");
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through previous use_type_clause at");


PACKAGE BODY BASIC_SDL_DATAVIEW with SPARK_Mode IS




pragma Warnings (Off, "formal parameter ""val1"" is not referenced");
pragma Warnings (Off, "formal parameter ""val2"" is not referenced");
function asn1SccMy_Integer_Equal(val1, val2: in asn1SccMy_Integer)
    return Boolean 
is
begin
    pragma Warnings (Off, "condition can only be False if invalid values present");        
    pragma Warnings (Off, "condition can only be True if invalid values present");        
	return val1 = val2;

    pragma Warnings (On, "condition can only be False if invalid values present");        
    pragma Warnings (On, "condition can only be True if invalid values present");        
end asn1SccMy_Integer_Equal;
pragma Warnings (On, "formal parameter ""val1"" is not referenced");
pragma Warnings (On, "formal parameter ""val2"" is not referenced");

function asn1SccMy_Integer_Init return asn1SccMy_Integer
is
    val: asn1SccMy_Integer;
begin
    val := 3;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccMy_Integer_Init;

	pragma Warnings (Off, "formal parameter ""val"" is not referenced");
function asn1SccMy_Integer_IsConstraintValid(val : in asn1SccMy_Integer) return adaasn1rtl.ASN1_RESULT
is
	pragma Warnings (On, "formal parameter ""val"" is not referenced");
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
	pragma Warnings (Off, "condition can only be False if invalid values present");
	pragma Warnings (Off, "condition can only be True if invalid values present");
    ret.Success := ((3 <= val) AND (val <= 1415));
    ret.ErrorCode := (if ret.Success then 0 else ERR_MY_INTEGER);
	pragma Warnings (On, "condition can only be False if invalid values present");
	pragma Warnings (On, "condition can only be True if invalid values present");
    return ret;
end asn1SccMy_Integer_IsConstraintValid;


 

END BASIC_SDL_DATAVIEW;