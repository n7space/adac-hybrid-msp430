-- Code automatically generated by asn1scc tool
with adaasn1rtl;


pragma Warnings (Off, "unit ""system"" is not referenced");
with system;
pragma Warnings (On, "unit ""system"" is not referenced");

pragma Warnings (Off, "use clause for package ""adaasn1rtl"" has no effect");
use adaasn1rtl;
pragma Warnings (On, "use clause for package ""adaasn1rtl"" has no effect");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through package use clause at line");
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through package use clause at line");


pragma Warnings (Off, "no entities of ""PUS_C"" are referenced");
pragma Warnings (Off, "use clause for package ""PUS_C"" has no effect");
WITH PUS_C; use PUS_C;
pragma Warnings (On, "no entities of ""PUS_C"" are referenced");
pragma Warnings (On, "use clause for package ""PUS_C"" has no effect");



PACKAGE DemoSat_Types with SPARK_Mode
IS


-- asn1SccPAYLOAD_HK_DATA --------------------------------------------

type asn1SccPAYLOAD_HK_DATA is record 
    payload_enabled : adaasn1rtl.Asn1Boolean;
    payload_data_enabled : adaasn1rtl.Asn1Boolean;
    payload_data : PUS_C.asn1SccUINT8T;
end record;


function asn1SccPAYLOAD_HK_DATA_Equal(val1, val2: in asn1SccPAYLOAD_HK_DATA) return Boolean;

function asn1SccPAYLOAD_HK_DATA_Init return asn1SccPAYLOAD_HK_DATA;

ERR_PAYLOAD_HK_DATA:CONSTANT INTEGER := 2238; 
ERR_PAYLOAD_HK_DATA_PAYLOAD_ENABLED:CONSTANT INTEGER := 2212; 
ERR_PAYLOAD_HK_DATA_PAYLOAD_DATA_ENABLED:CONSTANT INTEGER := 2219; 
ERR_PAYLOAD_HK_DATA_PAYLOAD_DATA_2:CONSTANT INTEGER := 2233; 
FUNCTION asn1SccPAYLOAD_HK_DATA_IsConstraintValid(val : in asn1SccPAYLOAD_HK_DATA) return adaasn1rtl.ASN1_RESULT;
-- asn1SccMODE_HK_DATA --------------------------------------------

type asn1SccMODE_HK_DATA is record 
    mode : PUS_C.asn1SccSATELLITE_MODE;
    input_voltage : PUS_C.asn1SccVOLTAGE;
end record;


function asn1SccMODE_HK_DATA_Equal(val1, val2: in asn1SccMODE_HK_DATA) return Boolean;

function asn1SccMODE_HK_DATA_Init return asn1SccMODE_HK_DATA;

ERR_MODE_HK_DATA:CONSTANT INTEGER := 2331; 
ERR_MODE_HK_DATA_MODE_2:CONSTANT INTEGER := 2314; 
ERR_MODE_HK_DATA_INPUT_VOLTAGE_2:CONSTANT INTEGER := 2326; 
FUNCTION asn1SccMODE_HK_DATA_IsConstraintValid(val : in asn1SccMODE_HK_DATA) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTHERMAL_HK_DATA --------------------------------------------

type asn1SccTHERMAL_HK_DATA is record 
    thermal_enabled : adaasn1rtl.Asn1Boolean;
    current_temperature : PUS_C.asn1SccTEMPERATURE;
    target_temperature : PUS_C.asn1SccTEMPERATURE;
    pi_integral : PUS_C.asn1SccPI_COEFFICIENT;
    thermal_duty_cycle : PUS_C.asn1SccDUTY_CYCLE;
end record;


function asn1SccTHERMAL_HK_DATA_Equal(val1, val2: in asn1SccTHERMAL_HK_DATA) return Boolean;

function asn1SccTHERMAL_HK_DATA_Init return asn1SccTHERMAL_HK_DATA;

ERR_THERMAL_HK_DATA:CONSTANT INTEGER := 2300; 
ERR_THERMAL_HK_DATA_THERMAL_ENABLED:CONSTANT INTEGER := 2245; 
ERR_THERMAL_HK_DATA_CURRENT_TEMPERATURE_2:CONSTANT INTEGER := 2259; 
ERR_THERMAL_HK_DATA_TARGET_TEMPERATURE_2:CONSTANT INTEGER := 2271; 
ERR_THERMAL_HK_DATA_PI_INTEGRAL_2:CONSTANT INTEGER := 2283; 
ERR_THERMAL_HK_DATA_THERMAL_DUTY_CYCLE_2:CONSTANT INTEGER := 2295; 
FUNCTION asn1SccTHERMAL_HK_DATA_IsConstraintValid(val : in asn1SccTHERMAL_HK_DATA) return adaasn1rtl.ASN1_RESULT;
-- asn1SccEXECUTION_REPORT --------------------------------------------

subtype asn1SccEXECUTION_REPORT_index_range is integer range 0..1;

type asn1SccEXECUTION_REPORT_selection is (execution_report_success_PRESENT, execution_report_failed_PRESENT);
for asn1SccEXECUTION_REPORT_selection use
    (execution_report_success_PRESENT => 1, execution_report_failed_PRESENT => 2);
for asn1SccEXECUTION_REPORT_selection'Size use 32;

type asn1SccEXECUTION_REPORT(kind : asn1SccEXECUTION_REPORT_selection:= execution_report_success_PRESENT) is 
record
    case kind is
    when execution_report_success_PRESENT =>
            execution_report_success: PUS_C.asn1SccTM_1_3_SuccessfulStartOfExecutionVerificationReport_Type;
    when execution_report_failed_PRESENT =>
            execution_report_failed: PUS_C.asn1SccTM_1_4_FailedStartOfExecutionVerificationReport_Type;
    end case;
end record;

for asn1SccEXECUTION_REPORT use 
record
    kind at 0 range 0..31;
end record;

function asn1SccEXECUTION_REPORT_Equal(val1, val2: in asn1SccEXECUTION_REPORT) return Boolean;

function asn1SccEXECUTION_REPORT_Init return asn1SccEXECUTION_REPORT;

ERR_EXECUTION_REPORT:CONSTANT INTEGER := 2467; 
ERR_EXECUTION_REPORT_EXECUTION_REPORT_SUCCESS_2:CONSTANT INTEGER := 2369; 
ERR_EXECUTION_REPORT_EXECUTION_REPORT_FAILED_2:CONSTANT INTEGER := 2462; 
FUNCTION asn1SccEXECUTION_REPORT_IsConstraintValid(val : in asn1SccEXECUTION_REPORT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE asn1SccT_REAL is adaasn1rtl.Asn1Real;


function asn1SccT_REAL_Equal(val1, val2: in asn1SccT_REAL) return Boolean;

function asn1SccT_REAL_Init return asn1SccT_REAL;

ERR_T_REAL:CONSTANT INTEGER := 2198; 
FUNCTION asn1SccT_REAL_IsConstraintValid(val : in asn1SccT_REAL) return adaasn1rtl.ASN1_RESULT;
SUBTYPE asn1SccTEMPERATURE_DIFFERENCE is adaasn1rtl.Asn1Real;


function asn1SccTEMPERATURE_DIFFERENCE_Equal(val1, val2: in asn1SccTEMPERATURE_DIFFERENCE) return Boolean;

function asn1SccTEMPERATURE_DIFFERENCE_Init return asn1SccTEMPERATURE_DIFFERENCE;

ERR_TEMPERATURE_DIFFERENCE:CONSTANT INTEGER := 2205; 
FUNCTION asn1SccTEMPERATURE_DIFFERENCE_IsConstraintValid(val : in asn1SccTEMPERATURE_DIFFERENCE) return adaasn1rtl.ASN1_RESULT;
pragma Warnings (Off, "there are no others");
 
pragma Warnings (On, "there are no others");
private
   --# hide DemoSat_Types;


END DemoSat_Types;