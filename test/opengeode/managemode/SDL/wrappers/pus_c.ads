-- Code automatically generated by asn1scc tool
with adaasn1rtl;


pragma Warnings (Off, "unit ""system"" is not referenced");
with system;
pragma Warnings (On, "unit ""system"" is not referenced");

pragma Warnings (Off, "use clause for package ""adaasn1rtl"" has no effect");
use adaasn1rtl;
pragma Warnings (On, "use clause for package ""adaasn1rtl"" has no effect");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through package use clause at line");
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through package use clause at line");



PACKAGE PUS_C with SPARK_Mode
IS


SUBTYPE asn1SccDmtNull is adaasn1rtl.Asn1UInt range 0 .. 0;


function asn1SccDmtNull_Equal(val1, val2: in asn1SccDmtNull) return Boolean;

function asn1SccDmtNull_Init return asn1SccDmtNull;

ERR_DMTNULL:CONSTANT INTEGER := 1; 
FUNCTION asn1SccDmtNull_IsConstraintValid(val : in asn1SccDmtNull) return adaasn1rtl.ASN1_RESULT;
SUBTYPE asn1SccHeaderless_Telemetries is asn1SccDmtNull range 0 .. 0;


function asn1SccHeaderless_Telemetries_Equal(val1, val2: in asn1SccHeaderless_Telemetries) return Boolean;

function asn1SccHeaderless_Telemetries_Init return asn1SccHeaderless_Telemetries;

ERR_HEADERLESS_TELEMETRIES_2:CONSTANT INTEGER := 1364; 
FUNCTION asn1SccHeaderless_Telemetries_IsConstraintValid(val : in asn1SccHeaderless_Telemetries) return adaasn1rtl.ASN1_RESULT;
SUBTYPE asn1SccTYPE_ID is adaasn1rtl.Asn1UInt range 0 .. 255;


function asn1SccTYPE_ID_Equal(val1, val2: in asn1SccTYPE_ID) return Boolean;

function asn1SccTYPE_ID_Init return asn1SccTYPE_ID;

ERR_TYPE_ID:CONSTANT INTEGER := 8; 
FUNCTION asn1SccTYPE_ID_IsConstraintValid(val : in asn1SccTYPE_ID) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccREQUEST_ID_index_range is integer range 0..4;
type asn1SccREQUEST_ID is (asn1Sccrequest_id_switch_mode, asn1Sccrequest_id_set_threshold_voltage, asn1Sccrequest_id_set_thermal_control_parameters, asn1Sccrequest_id_distribute_on_off_device_command, asn1Sccrequest_id_distribute_register_load_command) with Convention => C;
for asn1SccREQUEST_ID use
    (asn1Sccrequest_id_switch_mode => 0, asn1Sccrequest_id_set_threshold_voltage => 1, asn1Sccrequest_id_set_thermal_control_parameters => 2, asn1Sccrequest_id_distribute_on_off_device_command => 3, asn1Sccrequest_id_distribute_register_load_command => 4);

function asn1SccREQUEST_ID_Equal(val1, val2: in asn1SccREQUEST_ID) return Boolean;

function asn1SccREQUEST_ID_Init return asn1SccREQUEST_ID;

ERR_REQUEST_ID:CONSTANT INTEGER := 15; 
FUNCTION asn1SccREQUEST_ID_IsConstraintValid(val : in asn1SccREQUEST_ID) return adaasn1rtl.ASN1_RESULT;
-- asn1SccSuccessfulStartOfExecutionNotificationNotification_Type --------------------------------------------

type asn1SccSuccessfulStartOfExecutionNotificationNotification_Type is record 
    requestID : asn1SccREQUEST_ID;
end record;


function asn1SccSuccessfulStartOfExecutionNotificationNotification_Type_Equal(val1, val2: in asn1SccSuccessfulStartOfExecutionNotificationNotification_Type) return Boolean;

function asn1SccSuccessfulStartOfExecutionNotificationNotification_Type_Init return asn1SccSuccessfulStartOfExecutionNotificationNotification_Type;

ERR_SUCCESSFULSTARTOFEXECUTIONNOTIFICATIONNOTIFICATION_TYPE:CONSTANT INTEGER := 294; 
ERR_SUCCESSFULSTARTOFEXECUTIONNOTIFICATIONNOTIFICATION_TYPE_REQUESTID_2:CONSTANT INTEGER := 289; 
FUNCTION asn1SccSuccessfulStartOfExecutionNotificationNotification_Type_IsConstraintValid(val : in asn1SccSuccessfulStartOfExecutionNotificationNotification_Type) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTM_1_3_SuccessfulStartOfExecutionVerificationReport_Type --------------------------------------------

type asn1SccTM_1_3_SuccessfulStartOfExecutionVerificationReport_Type is record 
    successfulStartOfExecutionNotificationNotification : asn1SccSuccessfulStartOfExecutionNotificationNotification_Type;
end record;


function asn1SccTM_1_3_SuccessfulStartOfExecutionVerificationReport_Type_Equal(val1, val2: in asn1SccTM_1_3_SuccessfulStartOfExecutionVerificationReport_Type) return Boolean;

function asn1SccTM_1_3_SuccessfulStartOfExecutionVerificationReport_Type_Init return asn1SccTM_1_3_SuccessfulStartOfExecutionVerificationReport_Type;

ERR_TM_1_3_SUCCESSFULSTARTOFEXECUTIONVERIFICATIONREPORT_TYPE:CONSTANT INTEGER := 325; 
ERR_TM_1_3_SUCCESSFULSTARTOFEXECUTIONVERIFICATIONREPORT_TYPE_SUCCESSFULSTARTOFEXECUTIONNOTIFICATIONNOTIFICATION_2:CONSTANT INTEGER := 320; 
FUNCTION asn1SccTM_1_3_SuccessfulStartOfExecutionVerificationReport_Type_IsConstraintValid(val : in asn1SccTM_1_3_SuccessfulStartOfExecutionVerificationReport_Type) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccFAILURE_NOTICE_CODE_index_range is integer range 0..2;
type asn1SccFAILURE_NOTICE_CODE is (asn1Sccfailure_notice_code_invalid_address, asn1Sccfailure_notice_code_invalid_mode, asn1Sccfailure_notice_code_invalid_state) with Convention => C;
for asn1SccFAILURE_NOTICE_CODE use
    (asn1Sccfailure_notice_code_invalid_address => 0, asn1Sccfailure_notice_code_invalid_mode => 1, asn1Sccfailure_notice_code_invalid_state => 2);

function asn1SccFAILURE_NOTICE_CODE_Equal(val1, val2: in asn1SccFAILURE_NOTICE_CODE) return Boolean;

function asn1SccFAILURE_NOTICE_CODE_Init return asn1SccFAILURE_NOTICE_CODE;

ERR_FAILURE_NOTICE_CODE:CONSTANT INTEGER := 22; 
FUNCTION asn1SccFAILURE_NOTICE_CODE_IsConstraintValid(val : in asn1SccFAILURE_NOTICE_CODE) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccON_OFF_DEVICE_ADDRESS_index_range is integer range 0..0;
type asn1SccON_OFF_DEVICE_ADDRESS is (asn1Sccon_off_device_address_display) with Convention => C;
for asn1SccON_OFF_DEVICE_ADDRESS use
    (asn1Sccon_off_device_address_display => 0);

function asn1SccON_OFF_DEVICE_ADDRESS_Equal(val1, val2: in asn1SccON_OFF_DEVICE_ADDRESS) return Boolean;

function asn1SccON_OFF_DEVICE_ADDRESS_Init return asn1SccON_OFF_DEVICE_ADDRESS;

ERR_ON_OFF_DEVICE_ADDRESS:CONSTANT INTEGER := 81; 
FUNCTION asn1SccON_OFF_DEVICE_ADDRESS_IsConstraintValid(val : in asn1SccON_OFF_DEVICE_ADDRESS) return adaasn1rtl.ASN1_RESULT;
-- asn1SccDistributeAnOnoffDeviceCommand_Type --------------------------------------------

type asn1SccDistributeAnOnoffDeviceCommand_Type is record 
    onOffDeviceAddress : asn1SccON_OFF_DEVICE_ADDRESS;
end record;


function asn1SccDistributeAnOnoffDeviceCommand_Type_Equal(val1, val2: in asn1SccDistributeAnOnoffDeviceCommand_Type) return Boolean;

function asn1SccDistributeAnOnoffDeviceCommand_Type_Init return asn1SccDistributeAnOnoffDeviceCommand_Type;

ERR_DISTRIBUTEANONOFFDEVICECOMMAND_TYPE:CONSTANT INTEGER := 508; 
ERR_DISTRIBUTEANONOFFDEVICECOMMAND_TYPE_ONOFFDEVICEADDRESS_2:CONSTANT INTEGER := 503; 
FUNCTION asn1SccDistributeAnOnoffDeviceCommand_Type_IsConstraintValid(val : in asn1SccDistributeAnOnoffDeviceCommand_Type) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type --------------------------------------------
-- asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type_instructionsToDistributeAnOnoffDeviceCommand --------------------------------------------


subtype asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type_instructionsToDistributeAnOnoffDeviceCommand_index is integer range 1..4;
type asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type_instructionsToDistributeAnOnoffDeviceCommand_array is array (asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type_instructionsToDistributeAnOnoffDeviceCommand_index) of asn1SccDistributeAnOnoffDeviceCommand_Type;
subtype asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type_instructionsToDistributeAnOnoffDeviceCommand_length_index is integer range 0..4;
type asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type_instructionsToDistributeAnOnoffDeviceCommand is  record
    Length : asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type_instructionsToDistributeAnOnoffDeviceCommand_length_index;
    Data  : asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type_instructionsToDistributeAnOnoffDeviceCommand_array;
end record;

type asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type is record 
    instructionsToDistributeAnOnoffDeviceCommand : asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type_instructionsToDistributeAnOnoffDeviceCommand;
end record;


function asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type_instructionsToDistributeAnOnoffDeviceCommand_Equal(val1, val2: in asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type_instructionsToDistributeAnOnoffDeviceCommand) return Boolean;

function asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type_Equal(val1, val2: in asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type) return Boolean;

function asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type_instructionsToDistributeAnOnoffDeviceCommand_Init return asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type_instructionsToDistributeAnOnoffDeviceCommand;
function asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type_Init return asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type;

ERR_TC_2_1_DISTRIBUTEONOFFDEVICECOMMANDS_TYPE:CONSTANT INTEGER := 553; 
ERR_TC_2_1_DISTRIBUTEONOFFDEVICECOMMANDS_TYPE_INSTRUCTIONSTODISTRIBUTEANONOFFDEVICECOMMAND:CONSTANT INTEGER := 546; 
ERR_TC_2_1_DISTRIBUTEONOFFDEVICECOMMANDS_TYPE_INSTRUCTIONSTODISTRIBUTEANONOFFDEVICECOMMAND_ELM_2:CONSTANT INTEGER := 541; 
FUNCTION asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type_IsConstraintValid(val : in asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccREGISTER_ADDRESS_index_range is integer range 0..0;
type asn1SccREGISTER_ADDRESS is (asn1Sccregister_address_display_data) with Convention => C;
for asn1SccREGISTER_ADDRESS use
    (asn1Sccregister_address_display_data => 0);

function asn1SccREGISTER_ADDRESS_Equal(val1, val2: in asn1SccREGISTER_ADDRESS) return Boolean;

function asn1SccREGISTER_ADDRESS_Init return asn1SccREGISTER_ADDRESS;

ERR_REGISTER_ADDRESS:CONSTANT INTEGER := 88; 
FUNCTION asn1SccREGISTER_ADDRESS_IsConstraintValid(val : in asn1SccREGISTER_ADDRESS) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccHOUSEKEEPING_PARAMETER_REPORT_STRUCTURE_ID_index_range is integer range 0..0;
type asn1SccHOUSEKEEPING_PARAMETER_REPORT_STRUCTURE_ID is (asn1Scchk_id_all) with Convention => C;
for asn1SccHOUSEKEEPING_PARAMETER_REPORT_STRUCTURE_ID use
    (asn1Scchk_id_all => 0);

function asn1SccHOUSEKEEPING_PARAMETER_REPORT_STRUCTURE_ID_Equal(val1, val2: in asn1SccHOUSEKEEPING_PARAMETER_REPORT_STRUCTURE_ID) return Boolean;

function asn1SccHOUSEKEEPING_PARAMETER_REPORT_STRUCTURE_ID_Init return asn1SccHOUSEKEEPING_PARAMETER_REPORT_STRUCTURE_ID;

ERR_HOUSEKEEPING_PARAMETER_REPORT_STRUCTURE_ID:CONSTANT INTEGER := 114; 
FUNCTION asn1SccHOUSEKEEPING_PARAMETER_REPORT_STRUCTURE_ID_IsConstraintValid(val : in asn1SccHOUSEKEEPING_PARAMETER_REPORT_STRUCTURE_ID) return adaasn1rtl.ASN1_RESULT;
SUBTYPE asn1SccPI_COEFFICIENT is adaasn1rtl.Asn1Real;


function asn1SccPI_COEFFICIENT_Equal(val1, val2: in asn1SccPI_COEFFICIENT) return Boolean;

function asn1SccPI_COEFFICIENT_Init return asn1SccPI_COEFFICIENT;

ERR_PI_COEFFICIENT:CONSTANT INTEGER := 121; 
FUNCTION asn1SccPI_COEFFICIENT_IsConstraintValid(val : in asn1SccPI_COEFFICIENT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE asn1SccUINT8T is adaasn1rtl.Asn1UInt range 0 .. 255;


function asn1SccUINT8T_Equal(val1, val2: in asn1SccUINT8T) return Boolean;

function asn1SccUINT8T_Init return asn1SccUINT8T;

ERR_UINT8T:CONSTANT INTEGER := 247; 
FUNCTION asn1SccUINT8T_IsConstraintValid(val : in asn1SccUINT8T) return adaasn1rtl.ASN1_RESULT;
-- asn1SccREGISTER_DATA --------------------------------------------

subtype asn1SccREGISTER_DATA_index_range is integer range 0..0;

type asn1SccREGISTER_DATA_selection is (register_address_display_data_PRESENT);
for asn1SccREGISTER_DATA_selection use
    (register_address_display_data_PRESENT => 1);
for asn1SccREGISTER_DATA_selection'Size use 32;

type asn1SccREGISTER_DATA(kind : asn1SccREGISTER_DATA_selection:= register_address_display_data_PRESENT) is 
record
    case kind is
    when register_address_display_data_PRESENT =>
            register_address_display_data: asn1SccUINT8T;
    end case;
end record;

for asn1SccREGISTER_DATA use 
record
    kind at 0 range 0..31;
end record;

function asn1SccREGISTER_DATA_Equal(val1, val2: in asn1SccREGISTER_DATA) return Boolean;

function asn1SccREGISTER_DATA_Init return asn1SccREGISTER_DATA;

ERR_REGISTER_DATA:CONSTANT INTEGER := 107; 
ERR_REGISTER_DATA_REGISTER_ADDRESS_DISPLAY_DATA_2:CONSTANT INTEGER := 102; 
FUNCTION asn1SccREGISTER_DATA_IsConstraintValid(val : in asn1SccREGISTER_DATA) return adaasn1rtl.ASN1_RESULT;
-- asn1SccDistributeARegisterLoadCommand_Type --------------------------------------------

type asn1SccDistributeARegisterLoadCommand_Type is record 
    registerData : asn1SccREGISTER_DATA;
end record;


function asn1SccDistributeARegisterLoadCommand_Type_Equal(val1, val2: in asn1SccDistributeARegisterLoadCommand_Type) return Boolean;

function asn1SccDistributeARegisterLoadCommand_Type_Init return asn1SccDistributeARegisterLoadCommand_Type;

ERR_DISTRIBUTEAREGISTERLOADCOMMAND_TYPE:CONSTANT INTEGER := 584; 
ERR_DISTRIBUTEAREGISTERLOADCOMMAND_TYPE_REGISTERDATA_2:CONSTANT INTEGER := 579; 
FUNCTION asn1SccDistributeARegisterLoadCommand_Type_IsConstraintValid(val : in asn1SccDistributeARegisterLoadCommand_Type) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTC_2_2_DistributeRegisterLoadCommands_Type --------------------------------------------
-- asn1SccTC_2_2_DistributeRegisterLoadCommands_Type_instructionsToDistributeARegisterLoadCommand --------------------------------------------


subtype asn1SccTC_2_2_DistributeRegisterLoadCommands_Type_instructionsToDistributeARegisterLoadCommand_index is integer range 1..4;
type asn1SccTC_2_2_DistributeRegisterLoadCommands_Type_instructionsToDistributeARegisterLoadCommand_array is array (asn1SccTC_2_2_DistributeRegisterLoadCommands_Type_instructionsToDistributeARegisterLoadCommand_index) of asn1SccDistributeARegisterLoadCommand_Type;
subtype asn1SccTC_2_2_DistributeRegisterLoadCommands_Type_instructionsToDistributeARegisterLoadCommand_length_index is integer range 0..4;
type asn1SccTC_2_2_DistributeRegisterLoadCommands_Type_instructionsToDistributeARegisterLoadCommand is  record
    Length : asn1SccTC_2_2_DistributeRegisterLoadCommands_Type_instructionsToDistributeARegisterLoadCommand_length_index;
    Data  : asn1SccTC_2_2_DistributeRegisterLoadCommands_Type_instructionsToDistributeARegisterLoadCommand_array;
end record;

type asn1SccTC_2_2_DistributeRegisterLoadCommands_Type is record 
    instructionsToDistributeARegisterLoadCommand : asn1SccTC_2_2_DistributeRegisterLoadCommands_Type_instructionsToDistributeARegisterLoadCommand;
end record;


function asn1SccTC_2_2_DistributeRegisterLoadCommands_Type_instructionsToDistributeARegisterLoadCommand_Equal(val1, val2: in asn1SccTC_2_2_DistributeRegisterLoadCommands_Type_instructionsToDistributeARegisterLoadCommand) return Boolean;

function asn1SccTC_2_2_DistributeRegisterLoadCommands_Type_Equal(val1, val2: in asn1SccTC_2_2_DistributeRegisterLoadCommands_Type) return Boolean;

function asn1SccTC_2_2_DistributeRegisterLoadCommands_Type_instructionsToDistributeARegisterLoadCommand_Init return asn1SccTC_2_2_DistributeRegisterLoadCommands_Type_instructionsToDistributeARegisterLoadCommand;
function asn1SccTC_2_2_DistributeRegisterLoadCommands_Type_Init return asn1SccTC_2_2_DistributeRegisterLoadCommands_Type;

ERR_TC_2_2_DISTRIBUTEREGISTERLOADCOMMANDS_TYPE:CONSTANT INTEGER := 641; 
ERR_TC_2_2_DISTRIBUTEREGISTERLOADCOMMANDS_TYPE_INSTRUCTIONSTODISTRIBUTEAREGISTERLOADCOMMAND:CONSTANT INTEGER := 634; 
ERR_TC_2_2_DISTRIBUTEREGISTERLOADCOMMANDS_TYPE_INSTRUCTIONSTODISTRIBUTEAREGISTERLOADCOMMAND_ELM_2:CONSTANT INTEGER := 629; 
FUNCTION asn1SccTC_2_2_DistributeRegisterLoadCommands_Type_IsConstraintValid(val : in asn1SccTC_2_2_DistributeRegisterLoadCommands_Type) return adaasn1rtl.ASN1_RESULT;
SUBTYPE asn1SccDUTY_CYCLE is adaasn1rtl.Asn1Real;


function asn1SccDUTY_CYCLE_Equal(val1, val2: in asn1SccDUTY_CYCLE) return Boolean;

function asn1SccDUTY_CYCLE_Init return asn1SccDUTY_CYCLE;

ERR_DUTY_CYCLE:CONSTANT INTEGER := 254; 
FUNCTION asn1SccDUTY_CYCLE_IsConstraintValid(val : in asn1SccDUTY_CYCLE) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccSATELLITE_MODE_index_range is integer range 0..2;
type asn1SccSATELLITE_MODE is (asn1Sccsatellite_mode_safe, asn1Sccsatellite_mode_idle, asn1Sccsatellite_mode_operational) with Convention => C;
for asn1SccSATELLITE_MODE use
    (asn1Sccsatellite_mode_safe => 0, asn1Sccsatellite_mode_idle => 1, asn1Sccsatellite_mode_operational => 2);

function asn1SccSATELLITE_MODE_Equal(val1, val2: in asn1SccSATELLITE_MODE) return Boolean;

function asn1SccSATELLITE_MODE_Init return asn1SccSATELLITE_MODE;

ERR_SATELLITE_MODE:CONSTANT INTEGER := 261; 
FUNCTION asn1SccSATELLITE_MODE_IsConstraintValid(val : in asn1SccSATELLITE_MODE) return adaasn1rtl.ASN1_RESULT;
-- asn1SccSwitchMode_Type --------------------------------------------

type asn1SccSwitchMode_Type is record 
    mode : asn1SccSATELLITE_MODE;
end record;


function asn1SccSwitchMode_Type_Equal(val1, val2: in asn1SccSwitchMode_Type) return Boolean;

function asn1SccSwitchMode_Type_Init return asn1SccSwitchMode_Type;

ERR_SWITCHMODE_TYPE:CONSTANT INTEGER := 934; 
ERR_SWITCHMODE_TYPE_MODE_2:CONSTANT INTEGER := 929; 
FUNCTION asn1SccSwitchMode_Type_IsConstraintValid(val : in asn1SccSwitchMode_Type) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTC_222_1_SwitchMode_Type --------------------------------------------

type asn1SccTC_222_1_SwitchMode_Type is record 
    instructionToSwitchMode : asn1SccSwitchMode_Type;
end record;


function asn1SccTC_222_1_SwitchMode_Type_Equal(val1, val2: in asn1SccTC_222_1_SwitchMode_Type) return Boolean;

function asn1SccTC_222_1_SwitchMode_Type_Init return asn1SccTC_222_1_SwitchMode_Type;

ERR_TC_222_1_SWITCHMODE_TYPE:CONSTANT INTEGER := 965; 
ERR_TC_222_1_SWITCHMODE_TYPE_INSTRUCTIONTOSWITCHMODE_2:CONSTANT INTEGER := 960; 
FUNCTION asn1SccTC_222_1_SwitchMode_Type_IsConstraintValid(val : in asn1SccTC_222_1_SwitchMode_Type) return adaasn1rtl.ASN1_RESULT;
SUBTYPE asn1SccVOLTAGE is adaasn1rtl.Asn1Real;


function asn1SccVOLTAGE_Equal(val1, val2: in asn1SccVOLTAGE) return Boolean;

function asn1SccVOLTAGE_Init return asn1SccVOLTAGE;

ERR_VOLTAGE:CONSTANT INTEGER := 268; 
FUNCTION asn1SccVOLTAGE_IsConstraintValid(val : in asn1SccVOLTAGE) return adaasn1rtl.ASN1_RESULT;
-- asn1SccFAILURE_NOTICE_DATA --------------------------------------------
subtype asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_address_index_range is integer range 0..0;
type asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_address is (asn1Sccinvalid_address) with Convention => C;
for asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_address use
    (asn1Sccinvalid_address => 0);
-- asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_mode --------------------------------------------

type asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_mode is record 
    mode : asn1SccSATELLITE_MODE;
    input_voltage : asn1SccVOLTAGE;
end record;

subtype asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_state_index_range is integer range 0..0;
type asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_state is (asn1Sccdisabled) with Convention => C;
for asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_state use
    (asn1Sccdisabled => 0);

subtype asn1SccFAILURE_NOTICE_DATA_index_range is integer range 0..2;

type asn1SccFAILURE_NOTICE_DATA_selection is (failure_notice_code_invalid_address_PRESENT, failure_notice_code_invalid_mode_PRESENT, failure_notice_code_invalid_state_PRESENT);
for asn1SccFAILURE_NOTICE_DATA_selection use
    (failure_notice_code_invalid_address_PRESENT => 1, failure_notice_code_invalid_mode_PRESENT => 2, failure_notice_code_invalid_state_PRESENT => 3);
for asn1SccFAILURE_NOTICE_DATA_selection'Size use 32;

type asn1SccFAILURE_NOTICE_DATA(kind : asn1SccFAILURE_NOTICE_DATA_selection:= failure_notice_code_invalid_address_PRESENT) is 
record
    case kind is
    when failure_notice_code_invalid_address_PRESENT =>
            failure_notice_code_invalid_address: asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_address;
    when failure_notice_code_invalid_mode_PRESENT =>
            failure_notice_code_invalid_mode: asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_mode;
    when failure_notice_code_invalid_state_PRESENT =>
            failure_notice_code_invalid_state: asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_state;
    end case;
end record;

for asn1SccFAILURE_NOTICE_DATA use 
record
    kind at 0 range 0..31;
end record;

function asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_address_Equal(val1, val2: in asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_address) return Boolean;

function asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_mode_Equal(val1, val2: in asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_mode) return Boolean;

function asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_state_Equal(val1, val2: in asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_state) return Boolean;

function asn1SccFAILURE_NOTICE_DATA_Equal(val1, val2: in asn1SccFAILURE_NOTICE_DATA) return Boolean;

function asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_address_Init return asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_address;
function asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_mode_Init return asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_mode;
function asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_state_Init return asn1SccFAILURE_NOTICE_DATA_failure_notice_code_invalid_state;
function asn1SccFAILURE_NOTICE_DATA_Init return asn1SccFAILURE_NOTICE_DATA;

ERR_FAILURE_NOTICE_DATA:CONSTANT INTEGER := 74; 
ERR_FAILURE_NOTICE_DATA_FAILURE_NOTICE_CODE_INVALID_ADDRESS:CONSTANT INTEGER := 29; 
ERR_FAILURE_NOTICE_DATA_FAILURE_NOTICE_CODE_INVALID_MODE:CONSTANT INTEGER := 60; 
ERR_FAILURE_NOTICE_DATA_FAILURE_NOTICE_CODE_INVALID_MODE_MODE_2:CONSTANT INTEGER := 43; 
ERR_FAILURE_NOTICE_DATA_FAILURE_NOTICE_CODE_INVALID_MODE_INPUT_VOLTAGE_2:CONSTANT INTEGER := 55; 
ERR_FAILURE_NOTICE_DATA_FAILURE_NOTICE_CODE_INVALID_STATE:CONSTANT INTEGER := 67; 
FUNCTION asn1SccFAILURE_NOTICE_DATA_IsConstraintValid(val : in asn1SccFAILURE_NOTICE_DATA) return adaasn1rtl.ASN1_RESULT;
-- asn1SccFailedStartOfExecutionNotificationNotification_Type --------------------------------------------

type asn1SccFailedStartOfExecutionNotificationNotification_Type is record 
    requestID : asn1SccREQUEST_ID;
    failureNoticeData : asn1SccFAILURE_NOTICE_DATA;
end record;


function asn1SccFailedStartOfExecutionNotificationNotification_Type_Equal(val1, val2: in asn1SccFailedStartOfExecutionNotificationNotification_Type) return Boolean;

function asn1SccFailedStartOfExecutionNotificationNotification_Type_Init return asn1SccFailedStartOfExecutionNotificationNotification_Type;

ERR_FAILEDSTARTOFEXECUTIONNOTIFICATIONNOTIFICATION_TYPE:CONSTANT INTEGER := 401; 
ERR_FAILEDSTARTOFEXECUTIONNOTIFICATIONNOTIFICATION_TYPE_REQUESTID_2:CONSTANT INTEGER := 339; 
ERR_FAILEDSTARTOFEXECUTIONNOTIFICATIONNOTIFICATION_TYPE_FAILURENOTICEDATA_2:CONSTANT INTEGER := 396; 
FUNCTION asn1SccFailedStartOfExecutionNotificationNotification_Type_IsConstraintValid(val : in asn1SccFailedStartOfExecutionNotificationNotification_Type) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTM_1_4_FailedStartOfExecutionVerificationReport_Type --------------------------------------------

type asn1SccTM_1_4_FailedStartOfExecutionVerificationReport_Type is record 
    failedStartOfExecutionNotificationNotification : asn1SccFailedStartOfExecutionNotificationNotification_Type;
end record;


function asn1SccTM_1_4_FailedStartOfExecutionVerificationReport_Type_Equal(val1, val2: in asn1SccTM_1_4_FailedStartOfExecutionVerificationReport_Type) return Boolean;

function asn1SccTM_1_4_FailedStartOfExecutionVerificationReport_Type_Init return asn1SccTM_1_4_FailedStartOfExecutionVerificationReport_Type;

ERR_TM_1_4_FAILEDSTARTOFEXECUTIONVERIFICATIONREPORT_TYPE:CONSTANT INTEGER := 489; 
ERR_TM_1_4_FAILEDSTARTOFEXECUTIONVERIFICATIONREPORT_TYPE_FAILEDSTARTOFEXECUTIONNOTIFICATIONNOTIFICATION_2:CONSTANT INTEGER := 484; 
FUNCTION asn1SccTM_1_4_FailedStartOfExecutionVerificationReport_Type_IsConstraintValid(val : in asn1SccTM_1_4_FailedStartOfExecutionVerificationReport_Type) return adaasn1rtl.ASN1_RESULT;
-- asn1SccSetSafeThresholdVoltage_Type --------------------------------------------

type asn1SccSetSafeThresholdVoltage_Type is record 
    threshold_voltage : asn1SccVOLTAGE;
end record;


function asn1SccSetSafeThresholdVoltage_Type_Equal(val1, val2: in asn1SccSetSafeThresholdVoltage_Type) return Boolean;

function asn1SccSetSafeThresholdVoltage_Type_Init return asn1SccSetSafeThresholdVoltage_Type;

ERR_SETSAFETHRESHOLDVOLTAGE_TYPE:CONSTANT INTEGER := 984; 
ERR_SETSAFETHRESHOLDVOLTAGE_TYPE_THRESHOLD_VOLTAGE_2:CONSTANT INTEGER := 979; 
FUNCTION asn1SccSetSafeThresholdVoltage_Type_IsConstraintValid(val : in asn1SccSetSafeThresholdVoltage_Type) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTC_222_11_SetSafeThresholdVoltage_Type --------------------------------------------

type asn1SccTC_222_11_SetSafeThresholdVoltage_Type is record 
    instructionToSetSafeThresholdVoltage : asn1SccSetSafeThresholdVoltage_Type;
end record;


function asn1SccTC_222_11_SetSafeThresholdVoltage_Type_Equal(val1, val2: in asn1SccTC_222_11_SetSafeThresholdVoltage_Type) return Boolean;

function asn1SccTC_222_11_SetSafeThresholdVoltage_Type_Init return asn1SccTC_222_11_SetSafeThresholdVoltage_Type;

ERR_TC_222_11_SETSAFETHRESHOLDVOLTAGE_TYPE:CONSTANT INTEGER := 1015; 
ERR_TC_222_11_SETSAFETHRESHOLDVOLTAGE_TYPE_INSTRUCTIONTOSETSAFETHRESHOLDVOLTAGE_2:CONSTANT INTEGER := 1010; 
FUNCTION asn1SccTC_222_11_SetSafeThresholdVoltage_Type_IsConstraintValid(val : in asn1SccTC_222_11_SetSafeThresholdVoltage_Type) return adaasn1rtl.ASN1_RESULT;
SUBTYPE asn1SccTEMPERATURE is adaasn1rtl.Asn1Real;


function asn1SccTEMPERATURE_Equal(val1, val2: in asn1SccTEMPERATURE) return Boolean;

function asn1SccTEMPERATURE_Init return asn1SccTEMPERATURE;

ERR_TEMPERATURE:CONSTANT INTEGER := 275; 
FUNCTION asn1SccTEMPERATURE_IsConstraintValid(val : in asn1SccTEMPERATURE) return adaasn1rtl.ASN1_RESULT;
-- asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA --------------------------------------------
-- asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA_hk_id_all --------------------------------------------

type asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA_hk_id_all is record 
    mode : asn1SccSATELLITE_MODE;
    thermal_enabled : adaasn1rtl.Asn1Boolean;
    payload_enabled : adaasn1rtl.Asn1Boolean;
    input_voltage : asn1SccVOLTAGE;
    current_temperature : asn1SccTEMPERATURE;
    target_temperature : asn1SccTEMPERATURE;
    pi_integral : asn1SccPI_COEFFICIENT;
    thermal_duty_cycle : asn1SccDUTY_CYCLE;
    payload_data_enabled : adaasn1rtl.Asn1Boolean;
    payload_data : asn1SccUINT8T;
end record;


subtype asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA_index_range is integer range 0..0;

type asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA_selection is (hk_id_all_PRESENT);
for asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA_selection use
    (hk_id_all_PRESENT => 1);
for asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA_selection'Size use 32;

type asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA(kind : asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA_selection:= hk_id_all_PRESENT) is 
record
    case kind is
    when hk_id_all_PRESENT =>
            hk_id_all: asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA_hk_id_all;
    end case;
end record;

for asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA use 
record
    kind at 0 range 0..31;
end record;

function asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA_hk_id_all_Equal(val1, val2: in asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA_hk_id_all) return Boolean;

function asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA_Equal(val1, val2: in asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA) return Boolean;

function asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA_hk_id_all_Init return asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA_hk_id_all;
function asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA_Init return asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA;

ERR_HOUSEKEEPING_PARAMETER_REPORT_DATA:CONSTANT INTEGER := 240; 
ERR_HOUSEKEEPING_PARAMETER_REPORT_DATA_HK_ID_ALL:CONSTANT INTEGER := 233; 
ERR_HOUSEKEEPING_PARAMETER_REPORT_DATA_HK_ID_ALL_MODE_2:CONSTANT INTEGER := 135; 
ERR_HOUSEKEEPING_PARAMETER_REPORT_DATA_HK_ID_ALL_THERMAL_ENABLED:CONSTANT INTEGER := 140; 
ERR_HOUSEKEEPING_PARAMETER_REPORT_DATA_HK_ID_ALL_PAYLOAD_ENABLED:CONSTANT INTEGER := 147; 
ERR_HOUSEKEEPING_PARAMETER_REPORT_DATA_HK_ID_ALL_INPUT_VOLTAGE_2:CONSTANT INTEGER := 161; 
ERR_HOUSEKEEPING_PARAMETER_REPORT_DATA_HK_ID_ALL_CURRENT_TEMPERATURE_2:CONSTANT INTEGER := 173; 
ERR_HOUSEKEEPING_PARAMETER_REPORT_DATA_HK_ID_ALL_TARGET_TEMPERATURE_2:CONSTANT INTEGER := 185; 
ERR_HOUSEKEEPING_PARAMETER_REPORT_DATA_HK_ID_ALL_PI_INTEGRAL_2:CONSTANT INTEGER := 197; 
ERR_HOUSEKEEPING_PARAMETER_REPORT_DATA_HK_ID_ALL_THERMAL_DUTY_CYCLE_2:CONSTANT INTEGER := 209; 
ERR_HOUSEKEEPING_PARAMETER_REPORT_DATA_HK_ID_ALL_PAYLOAD_DATA_ENABLED:CONSTANT INTEGER := 214; 
ERR_HOUSEKEEPING_PARAMETER_REPORT_DATA_HK_ID_ALL_PAYLOAD_DATA_2:CONSTANT INTEGER := 228; 
FUNCTION asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA_IsConstraintValid(val : in asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA) return adaasn1rtl.ASN1_RESULT;
-- asn1SccHousekeepingParameterNotificationNotification_Type --------------------------------------------

type asn1SccHousekeepingParameterNotificationNotification_Type is record 
    data : asn1SccHOUSEKEEPING_PARAMETER_REPORT_DATA;
end record;


function asn1SccHousekeepingParameterNotificationNotification_Type_Equal(val1, val2: in asn1SccHousekeepingParameterNotificationNotification_Type) return Boolean;

function asn1SccHousekeepingParameterNotificationNotification_Type_Init return asn1SccHousekeepingParameterNotificationNotification_Type;

ERR_HOUSEKEEPINGPARAMETERNOTIFICATIONNOTIFICATION_TYPE:CONSTANT INTEGER := 772; 
ERR_HOUSEKEEPINGPARAMETERNOTIFICATIONNOTIFICATION_TYPE_DATA_2:CONSTANT INTEGER := 767; 
FUNCTION asn1SccHousekeepingParameterNotificationNotification_Type_IsConstraintValid(val : in asn1SccHousekeepingParameterNotificationNotification_Type) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTM_3_25_HousekeepingParameterReport_Type --------------------------------------------

type asn1SccTM_3_25_HousekeepingParameterReport_Type is record 
    housekeepingParameterNotificationNotification : asn1SccHousekeepingParameterNotificationNotification_Type;
end record;


function asn1SccTM_3_25_HousekeepingParameterReport_Type_Equal(val1, val2: in asn1SccTM_3_25_HousekeepingParameterReport_Type) return Boolean;

function asn1SccTM_3_25_HousekeepingParameterReport_Type_Init return asn1SccTM_3_25_HousekeepingParameterReport_Type;

ERR_TM_3_25_HOUSEKEEPINGPARAMETERREPORT_TYPE:CONSTANT INTEGER := 915; 
ERR_TM_3_25_HOUSEKEEPINGPARAMETERREPORT_TYPE_HOUSEKEEPINGPARAMETERNOTIFICATIONNOTIFICATION_2:CONSTANT INTEGER := 910; 
FUNCTION asn1SccTM_3_25_HousekeepingParameterReport_Type_IsConstraintValid(val : in asn1SccTM_3_25_HousekeepingParameterReport_Type) return adaasn1rtl.ASN1_RESULT;
-- asn1SccRegular_Telemetries --------------------------------------------

subtype asn1SccRegular_Telemetries_index_range is integer range 0..2;

type asn1SccRegular_Telemetries_selection is (tm_1_3_successfulStartOfExecutionVerificationReport_PRESENT, tm_1_4_failedStartOfExecutionVerificationReport_PRESENT, tm_3_25_housekeepingParameterReport_PRESENT);
for asn1SccRegular_Telemetries_selection use
    (tm_1_3_successfulStartOfExecutionVerificationReport_PRESENT => 1, tm_1_4_failedStartOfExecutionVerificationReport_PRESENT => 2, tm_3_25_housekeepingParameterReport_PRESENT => 3);
for asn1SccRegular_Telemetries_selection'Size use 32;

type asn1SccRegular_Telemetries(kind : asn1SccRegular_Telemetries_selection:= tm_1_3_successfulStartOfExecutionVerificationReport_PRESENT) is 
record
    case kind is
    when tm_1_3_successfulStartOfExecutionVerificationReport_PRESENT =>
            tm_1_3_successfulStartOfExecutionVerificationReport: asn1SccTM_1_3_SuccessfulStartOfExecutionVerificationReport_Type;
    when tm_1_4_failedStartOfExecutionVerificationReport_PRESENT =>
            tm_1_4_failedStartOfExecutionVerificationReport: asn1SccTM_1_4_FailedStartOfExecutionVerificationReport_Type;
    when tm_3_25_housekeepingParameterReport_PRESENT =>
            tm_3_25_housekeepingParameterReport: asn1SccTM_3_25_HousekeepingParameterReport_Type;
    end case;
end record;

for asn1SccRegular_Telemetries use 
record
    kind at 0 range 0..31;
end record;

function asn1SccRegular_Telemetries_Equal(val1, val2: in asn1SccRegular_Telemetries) return Boolean;

function asn1SccRegular_Telemetries_Init return asn1SccRegular_Telemetries;

ERR_REGULAR_TELEMETRIES:CONSTANT INTEGER := 1646; 
ERR_REGULAR_TELEMETRIES_TM_1_3_SUCCESSFULSTARTOFEXECUTIONVERIFICATIONREPORT_2:CONSTANT INTEGER := 1400; 
ERR_REGULAR_TELEMETRIES_TM_1_4_FAILEDSTARTOFEXECUTIONVERIFICATIONREPORT_2:CONSTANT INTEGER := 1493; 
ERR_REGULAR_TELEMETRIES_TM_3_25_HOUSEKEEPINGPARAMETERREPORT_2:CONSTANT INTEGER := 1641; 
FUNCTION asn1SccRegular_Telemetries_IsConstraintValid(val : in asn1SccRegular_Telemetries) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTelemetry --------------------------------------------

type asn1SccTelemetry is record 
    packet_data : asn1SccRegular_Telemetries;
end record;


function asn1SccTelemetry_Equal(val1, val2: in asn1SccTelemetry) return Boolean;

function asn1SccTelemetry_Init return asn1SccTelemetry;

ERR_TELEMETRY:CONSTANT INTEGER := 2191; 
ERR_TELEMETRY_PACKET_DATA_2:CONSTANT INTEGER := 2186; 
FUNCTION asn1SccTelemetry_IsConstraintValid(val : in asn1SccTelemetry) return adaasn1rtl.ASN1_RESULT;
-- asn1SccSetThermalControlParameters_Type --------------------------------------------

type asn1SccSetThermalControlParameters_Type is record 
    target_temperature : asn1SccTEMPERATURE;
    kp : asn1SccPI_COEFFICIENT;
    ki : asn1SccPI_COEFFICIENT;
end record;


function asn1SccSetThermalControlParameters_Type_Equal(val1, val2: in asn1SccSetThermalControlParameters_Type) return Boolean;

function asn1SccSetThermalControlParameters_Type_Init return asn1SccSetThermalControlParameters_Type;

ERR_SETTHERMALCONTROLPARAMETERS_TYPE:CONSTANT INTEGER := 1058; 
ERR_SETTHERMALCONTROLPARAMETERS_TYPE_TARGET_TEMPERATURE_2:CONSTANT INTEGER := 1029; 
ERR_SETTHERMALCONTROLPARAMETERS_TYPE_KP_2:CONSTANT INTEGER := 1041; 
ERR_SETTHERMALCONTROLPARAMETERS_TYPE_KI_2:CONSTANT INTEGER := 1053; 
FUNCTION asn1SccSetThermalControlParameters_Type_IsConstraintValid(val : in asn1SccSetThermalControlParameters_Type) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTC_222_21_SetThermalControlParameters_Type --------------------------------------------

type asn1SccTC_222_21_SetThermalControlParameters_Type is record 
    instructionToSetThermalControlParameters : asn1SccSetThermalControlParameters_Type;
end record;


function asn1SccTC_222_21_SetThermalControlParameters_Type_Equal(val1, val2: in asn1SccTC_222_21_SetThermalControlParameters_Type) return Boolean;

function asn1SccTC_222_21_SetThermalControlParameters_Type_Init return asn1SccTC_222_21_SetThermalControlParameters_Type;

ERR_TC_222_21_SETTHERMALCONTROLPARAMETERS_TYPE:CONSTANT INTEGER := 1113; 
ERR_TC_222_21_SETTHERMALCONTROLPARAMETERS_TYPE_INSTRUCTIONTOSETTHERMALCONTROLPARAMETERS_2:CONSTANT INTEGER := 1108; 
FUNCTION asn1SccTC_222_21_SetThermalControlParameters_Type_IsConstraintValid(val : in asn1SccTC_222_21_SetThermalControlParameters_Type) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTelecommands --------------------------------------------

subtype asn1SccTelecommands_index_range is integer range 0..4;

type asn1SccTelecommands_selection is (tc_2_1_distributeOnoffDeviceCommands_PRESENT, tc_2_2_distributeRegisterLoadCommands_PRESENT, tc_222_1_switchMode_PRESENT, tc_222_11_setSafeThresholdVoltage_PRESENT, tc_222_21_setThermalControlParameters_PRESENT);
for asn1SccTelecommands_selection use
    (tc_2_1_distributeOnoffDeviceCommands_PRESENT => 1, tc_2_2_distributeRegisterLoadCommands_PRESENT => 2, tc_222_1_switchMode_PRESENT => 3, tc_222_11_setSafeThresholdVoltage_PRESENT => 4, tc_222_21_setThermalControlParameters_PRESENT => 5);
for asn1SccTelecommands_selection'Size use 32;

type asn1SccTelecommands(kind : asn1SccTelecommands_selection:= tc_2_1_distributeOnoffDeviceCommands_PRESENT) is 
record
    case kind is
    when tc_2_1_distributeOnoffDeviceCommands_PRESENT =>
            tc_2_1_distributeOnoffDeviceCommands: asn1SccTC_2_1_DistributeOnoffDeviceCommands_Type;
    when tc_2_2_distributeRegisterLoadCommands_PRESENT =>
            tc_2_2_distributeRegisterLoadCommands: asn1SccTC_2_2_DistributeRegisterLoadCommands_Type;
    when tc_222_1_switchMode_PRESENT =>
            tc_222_1_switchMode: asn1SccTC_222_1_SwitchMode_Type;
    when tc_222_11_setSafeThresholdVoltage_PRESENT =>
            tc_222_11_setSafeThresholdVoltage: asn1SccTC_222_11_SetSafeThresholdVoltage_Type;
    when tc_222_21_setThermalControlParameters_PRESENT =>
            tc_222_21_setThermalControlParameters: asn1SccTC_222_21_SetThermalControlParameters_Type;
    end case;
end record;

for asn1SccTelecommands use 
record
    kind at 0 range 0..31;
end record;

function asn1SccTelecommands_Equal(val1, val2: in asn1SccTelecommands) return Boolean;

function asn1SccTelecommands_Init return asn1SccTelecommands;

ERR_TELECOMMANDS:CONSTANT INTEGER := 1350; 
ERR_TELECOMMANDS_TC_2_1_DISTRIBUTEONOFFDEVICECOMMANDS_2:CONSTANT INTEGER := 1158; 
ERR_TELECOMMANDS_TC_2_2_DISTRIBUTEREGISTERLOADCOMMANDS_2:CONSTANT INTEGER := 1213; 
ERR_TELECOMMANDS_TC_222_1_SWITCHMODE_2:CONSTANT INTEGER := 1249; 
ERR_TELECOMMANDS_TC_222_11_SETSAFETHRESHOLDVOLTAGE_2:CONSTANT INTEGER := 1285; 
ERR_TELECOMMANDS_TC_222_21_SETTHERMALCONTROLPARAMETERS_2:CONSTANT INTEGER := 1345; 
FUNCTION asn1SccTelecommands_IsConstraintValid(val : in asn1SccTelecommands) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTelecommand --------------------------------------------

type asn1SccTelecommand is record 
    packet_data : asn1SccTelecommands;
end record;


function asn1SccTelecommand_Equal(val1, val2: in asn1SccTelecommand) return Boolean;

function asn1SccTelecommand_Init return asn1SccTelecommand;

ERR_TELECOMMAND:CONSTANT INTEGER := 1895; 
ERR_TELECOMMAND_PACKET_DATA_2:CONSTANT INTEGER := 1890; 
FUNCTION asn1SccTelecommand_IsConstraintValid(val : in asn1SccTelecommand) return adaasn1rtl.ASN1_RESULT;
SUBTYPE asn1SccTC_2_1_COUNT is adaasn1rtl.Asn1UInt range 0 .. 4;


function asn1SccTC_2_1_COUNT_Equal(val1, val2: in asn1SccTC_2_1_COUNT) return Boolean;

function asn1SccTC_2_1_COUNT_Init return asn1SccTC_2_1_COUNT;

ERR_TC_2_1_COUNT:CONSTANT INTEGER := 515; 
FUNCTION asn1SccTC_2_1_COUNT_IsConstraintValid(val : in asn1SccTC_2_1_COUNT) return adaasn1rtl.ASN1_RESULT;
SUBTYPE asn1SccTC_2_2_COUNT is adaasn1rtl.Asn1UInt range 0 .. 4;


function asn1SccTC_2_2_COUNT_Equal(val1, val2: in asn1SccTC_2_2_COUNT) return Boolean;

function asn1SccTC_2_2_COUNT_Init return asn1SccTC_2_2_COUNT;

ERR_TC_2_2_COUNT:CONSTANT INTEGER := 591; 
FUNCTION asn1SccTC_2_2_COUNT_IsConstraintValid(val : in asn1SccTC_2_2_COUNT) return adaasn1rtl.ASN1_RESULT;
pragma Warnings (Off, "there are no others");
max_TC_2_1_Instructions : CONSTANT adaasn1rtl.Asn1Int:= 4;
max_TC_2_2_Instructions : CONSTANT adaasn1rtl.Asn1Int:= 4; 
pragma Warnings (On, "there are no others");
private
   --# hide PUS_C;


END PUS_C;